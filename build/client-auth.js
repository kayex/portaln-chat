// Generated by CoffeeScript 1.6.1
(function() {
  var ChatClient, MS, NETCODES, SESSID, cc, chatServer, logConnectionInfo,
    _this = this;

  MS = window.MessageSerializer;

  NETCODES = window.NETCODES;

  ChatClient = (function() {

    function ChatClient(server, sessid) {
      var _this = this;
      this.sessid = sessid;
      this.handleIncoming = function(incObject) {
        return ChatClient.prototype.handleIncoming.apply(_this, arguments);
      };
      this.ws = new WebSocket(server);
      this.uID = void 0;
      this.authenticated = false;
      this.msgID = 10;
      this.callbacks = {
        "cstatus": void 0,
        "message": void 0,
        "confirmed": void 0
      };
      this.ws.onmessage = function(message) {
        return _this.handleIncoming(message);
      };
      this.ws.onopen = function() {
        _this.emit("cstatus", "Connected to IM Server.");
        return _this.sendAuthChallenge();
      };
    }

    ChatClient.prototype.handleIncoming = function(incObject) {
      var parsedInc;
      parsedInc = MS.deserialize(incObject.data);
      switch (parsedInc.type) {
        case NETCODES.AUTH_RES:
          this.authenticate(parsedInc);
          break;
        case NETCODES.MSG_SEND_RES:
          this.emit("confirmed", parsedInc);
          break;
        case NETCODES.MSG:
          this.emit("message", parsedInc.message);
      }
      return void 0;
    };

    ChatClient.prototype.transmit = function(msgObject) {
      try {
        this.ws.send(MS.serialize(msgObject));
        return null;
      } catch (error) {
        return error;
      }
    };

    ChatClient.prototype.transmitMessage = function(msgObject) {
      var error;
      error = this.transmit({
        type: NETCODES.MSG_SEND_REQ,
        message: msgObject
      });
      if (error != null) {
        return error;
      }
    };

    ChatClient.prototype.createMessage = function(msgObject) {
      msgObject.id = this.msgID;
      return this.msgID++;
    };

    ChatClient.prototype.emit = function(event, arg) {
      var callback, evt, _ref, _results;
      _ref = this.callbacks;
      _results = [];
      for (evt in _ref) {
        callback = _ref[evt];
        if (evt === event && (callback != null)) {
          _results.push(callback(arg));
        }
      }
      return _results;
    };

    ChatClient.prototype.on = function(event, callback) {
      return this.callbacks[event] = callback;
    };

    ChatClient.prototype.authenticate = function(authObject) {
      var _ref;
      if ((authObject != null ? authObject.type : void 0) === !NETCODES.AUTH_RES || ((authObject != null ? (_ref = authObject.response) != null ? _ref.value : void 0 : void 0) == null)) {
        logConnectionInfo("AUTH_RES INVALID");
        this.authenticated = false;
        return false;
      }
      if (authObject.response.value === true) {
        this.uID = authObject.response.uID;
        logConnectionInfo("Client verified.");
        this.authenticated = true;
        return true;
      } else {
        logConnectionInfo("Client denied.");
        this.authenticated = false;
        return false;
      }
    };

    ChatClient.prototype.sendAuthChallenge = function() {
      this.emit("cstatus", "Authorizing...");
      return this.transmit({
        type: NETCODES.AUTH_REQ,
        SESSID: this.sessid
      });
    };

    return ChatClient;

  })();

  logConnectionInfo = function(info) {
    return console.log(info);
  };

  chatServer = "ws://arch.jvester.se:1337";

  SESSID = window.getCookie("PORTALNSESSID");

  cc = new ChatClient(chatServer, SESSID);

  cc.on("cstatus", function(status) {
    return console.log(status);
  });

  cc.on("message", function(msgObject) {
    return console.log(msgObject);
  });

  window.cc = cc;

}).call(this);
