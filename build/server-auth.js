// Generated by CoffeeScript 1.6.1
(function() {
  var ChatClientConnection, ChatServer, MS, WebSocketServer, config, cs, fs, http, https, logDir, logMessage, logServerInfo, logUserInfo, logWithTime, request,
    _this = this;

  WebSocketServer = require("ws").Server;

  fs = require("fs");

  https = require("https");

  http = require("http");

  request = require("request");

  MS = require("./message.js").Message;

  ChatClientConnection = (function() {

    function ChatClientConnection(ws, callback) {
      var _this = this;
      this.ws = ws;
      this.callback = callback;
      this.uID = void 0;
      this.authenticated = false;
      this.callbacks = {
        "message": void 0,
        "close": void 0
      };
      this.ws.on("message", function(message) {
        return _this.emit("message", message);
      });
      this.ws.on("close", function(code, reason) {
        return _this.emit("close");
      });
    }

    ChatClientConnection.prototype.emit = function(event, arg) {
      var callback, evt, _ref, _results;
      _ref = this.callbacks;
      _results = [];
      for (evt in _ref) {
        callback = _ref[evt];
        if (evt === event && typeof callback === "function") {
          _results.push(callback(arg));
        }
      }
      return _results;
    };

    ChatClientConnection.prototype.on = function(event, callback) {
      var _this = this;
      if (typeof event === "string" && typeof callback === "function") {
        return (function() {
          return _this.callbacks[event] = callback;
        })();
      }
    };

    ChatClientConnection.prototype.transmit = function(msgObject) {
      try {
        this.ws.send(MS.serialize(msgObject));
        return null;
      } catch (error) {
        return error;
      }
    };

    return ChatClientConnection;

  })();

  ChatServer = (function() {

    function ChatServer(config) {
      var server,
        _this = this;
      this.config = config;
      this.checkSession = function(client, sessid, callback) {
        return ChatServer.prototype.checkSession.apply(_this, arguments);
      };
      this.authenticateUser = function(client, authObject, done) {
        return ChatServer.prototype.authenticateUser.apply(_this, arguments);
      };
      this.handleClientRequest = function(client, request) {
        return ChatServer.prototype.handleClientRequest.apply(_this, arguments);
      };
      config = {
        key: fs.readFileSync("../keys/key.pem"),
        cert: fs.readFileSync("../keys/cert.pem")
      };
      server = https.createServer(config);
      server.listen(1337);
      this.wss = new WebSocketServer({
        server: server
      });
      this.clients = [];
      this.callbacks = {
        "client connect": void 0,
        "client disconnect": void 0,
        "message": void 0
      };
      this.wss.on("connection", function(ws) {
        var client;
        client = new ChatClientConnection(ws);
        client.on("message", function(message) {
          return _this.handleClientRequest(client, MS.deserialize(message));
        });
        return client.on("close", function() {
          var id, registeredClient;
          id = "unauthorized";
          registeredClient = _this.getClientByWS(client.ws);
          if (registeredClient != null) {
            id = registeredClient.uID;
            _this.delClientByWS(client.ws);
          }
          return _this.emit("client disconnect", id);
        });
      });
    }

    ChatServer.prototype.emit = function(event, arg) {
      var callback, evt, _ref, _results;
      _ref = this.callbacks;
      _results = [];
      for (evt in _ref) {
        callback = _ref[evt];
        if (evt === event && typeof callback === "function") {
          _results.push(callback(arg));
        }
      }
      return _results;
    };

    ChatServer.prototype.on = function(event, callback) {
      var _this = this;
      if (typeof event === "string" && typeof callback === "function") {
        return (function() {
          return _this.callbacks[event] = callback;
        })();
      }
    };

    ChatServer.prototype.handleClientRequest = function(client, request) {
      switch (MS.typeOf(request)) {
        case MS.CODES.AUTH_REQ:
          return this.checkSession(client, request.SESSID, this.authenticateUser);
        case MS.CODES.MSG_SEND_REQ:
          return this.handleClientMessageRequest(client, request.message);
      }
    };

    ChatServer.prototype.handleClientMessageRequest = function(client, message) {
      var clientFrom, clientTo;
      clientFrom = this.getClientByWS(client.ws);
      if (clientFrom == null) {
        client.transmit(MS.createMsgSendRes(false, {
          id: message != null ? message.id : void 0,
          reason: "NOT CONNECTED"
        }));
        return false;
      }
      message.fromuID = clientFrom.uID;
      clientTo = this.getClientByuID(message.touID);
      if (clientTo != null) {
        clientTo.transmit(MS.createMsg(message));
      }
      clientFrom.transmit(MS.createMsgSendRes(true, {
        id: message != null ? message.id : void 0
      }));
      return this.emit("message", message);
    };

    ChatServer.prototype.authenticateUser = function(client, authObject, done) {
      if (!MS.assert(authObject, MS.CODES.AUTH_EXTERNAL_RES)) {
        client.transmit(MS.createAuthRes(false, {
          reason: "AUTHENTICATION FAILED"
        }));
        return false;
      }
      if (authObject.loggedin) {
        client.transmit(MS.createAuthRes(true, {
          uID: authObject.uID
        }));
        client.authorized = true;
        client.uID = authObject.uID;
        this.addClient(client);
        this.emit("client connect", client.uID);
        return true;
      } else {
        client.transmit(MS.createAuthRes(false, {
          reason: "INVALID SESSID"
        }));
        return false;
      }
    };

    ChatServer.prototype.checkSession = function(client, sessid, callback) {
      var _this = this;
      return request.post("http://latest.portaln.se/skola/chatapi/authSESSID.php", {
        form: {
          passwd: this.config.authKey,
          SESSID: sessid
        }
      }, function(error, response, body) {
        var checkObject;
        if (response.statusCode === 200 && !error) {
          checkObject = JSON.parse(body);
        }
        return callback(client, checkObject);
      });
    };

    ChatServer.prototype.addClient = function(client) {
      if ((client.ws != null) && (client.uID != null) && client.authorized) {
        return this.clients.push(client);
      }
    };

    ChatServer.prototype.delClientByWS = function(ws) {
      var client, i, _i, _len, _ref, _results;
      _ref = this.clients;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        client = _ref[i];
        if ((client != null ? client.ws : void 0) === ws) {
          _results.push(this.clients.splice(i, 1));
        }
      }
      return _results;
    };

    ChatServer.prototype.getClientByuID = function(uID) {
      var client, _i, _len, _ref;
      _ref = this.clients;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        client = _ref[_i];
        if ((client != null ? client.uID : void 0) === uID) {
          return client;
        }
      }
      return null;
    };

    ChatServer.prototype.getClientByWS = function(ws) {
      var client, _i, _len, _ref;
      _ref = this.clients;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        client = _ref[_i];
        if ((client != null ? client.ws : void 0) === ws) {
          return client;
        }
      }
      return null;
    };

    ChatServer.prototype.getClientCount = function() {
      return this.clients.length;
    };

    return ChatServer;

  })();

  logWithTime = function(txt) {
    return "\n[" + (Date.now()) + "] " + txt;
  };

  logUserInfo = function(info) {
    var logString;
    logString = logWithTime("@" + info);
    return fs.appendFile("" + logDir + "activity.log", logString, function(err) {
      if (err) {
        return console.log("Error writing activity.log");
      }
    });
  };

  logServerInfo = function(info) {
    var logString;
    logString = logWithTime("#" + info);
    return fs.appendFile("" + logDir + "server.log", logString, function(err) {
      if (err) {
        return console.log("Error writing server.log");
      }
    });
  };

  logMessage = function(msgObject, callback) {
    return process.nextTick(function() {
      var fileNames, logDir, logString, name, written, _i, _len;
      logDir = "log/";
      logString = "\n[" + msgObject.timeStamp + "] " + msgObject.fromuID + "->" + msgObject.touID + " " + msgObject.content;
      fileNames = ["" + msgObject.fromuID + "-" + msgObject.touID + ".log", "" + msgObject.touID + "-" + msgObject.fromuID + ".log"];
      written = false;
      if (!written) {
        for (_i = 0, _len = fileNames.length; _i < _len; _i++) {
          name = fileNames[_i];
          if (fs.existsSync("" + logDir + name)) {
            (function() {
              fs.appendFileSync("" + logDir + name, logString);
              return written = true;
            })();
          }
        }
      }
      if (!written) {
        return fs.appendFileSync("" + logDir + fileNames[0], logString);
      }
    });
  };

  config = {
    authKey: "94bfd1921fe7663e776528e678e56f33"
  };

  cs = new ChatServer(config);

  cs.on("message", logMessage);

  cs.on("client connect", logUserInfo);

  cs.on("client disconnect", logUserInfo);

  logDir = "log/";

}).call(this);
