// Generated by CoffeeScript 1.6.1
(function() {
  var ClientHolder, MS, NETCODES, WebSocketServer, authenticateConnection, ch, checkSession, createClient, createMessageForWire, handleMessageRequest, handleRequest, log, logMessage, logMessageToDisk, logServerInfo, logUserInfo, postData, request, transmitMessage, wss, wssConfig;

  WebSocketServer = require("ws").Server;

  log = require("util").log;

  request = require("request");

  NETCODES = require("./netcodes.js").NETCODES;

  MS = require("./message.js").MessageSerializer;

  postData = {
    passwd: "94bfd1921fe7663e776528e678e56f33",
    SESSID: void 0
  };

  ClientHolder = (function() {

    function ClientHolder() {
      this.clients = [];
    }

    ClientHolder.prototype.addClient = function(client) {
      return this.clients.push(client);
    };

    ClientHolder.prototype.delClientByWS = function(ws) {
      var client, i, _i, _len, _ref, _results;
      _ref = this.clients;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        client = _ref[i];
        if (client.ws === ws) {
          _results.push(this.clients.splice(i, 1));
        }
      }
      return _results;
    };

    ClientHolder.prototype.getClientByuID = function(uID) {
      var client, _i, _len, _ref;
      _ref = this.clients;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        client = _ref[_i];
        if (client.uID === uID) {
          return client;
        }
      }
    };

    ClientHolder.prototype.getClientByWS = function(ws) {
      var client, _i, _len, _ref;
      _ref = this.clients;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        client = _ref[_i];
        if (client.ws === ws) {
          return client;
        }
      }
    };

    ClientHolder.prototype.getClientCount = function() {
      return this.clients.length;
    };

    return ClientHolder;

  })();

  createClient = function(ws, uID) {
    return {
      ws: ws,
      uID: uID
    };
  };

  checkSession = function(sessID) {
    var checkObject, checkResponse;
    checkResponse = "";
    request.post("http://latest.portaln.se/skola/chatapi.php/", {
      form: post
    }, function(error, response, body) {
      console.log("Body: " + body);
      if (response.statusCode === 200 && !error) {
        return checkResponse = body;
      }
    });
    checkObject = JSON.parse(checkResponse);
    return checkObject;
  };

  authenticateConnection = function(ws, authReq) {
    var authObject, checkResponse;
    authObject = JSON.parse(authReq);
    if ((authObject != null ? authObject.type : void 0) === !NETCODES.AUTH_REQ || !(authObject != null ? authObject.SESSID : void 0)) {
      ws.send({
        type: NETCODES.AUTH_RES,
        response: {
          value: false,
          reason: "AUTH_REQ INVALID"
        }
      });
      ws.close(4025, "AUTH_REQ INVALID");
      return false;
    }
    checkResponse = JSON.parse(checkSession(authObject.SESSID));
    if ((checkResponse != null ? checkResponse.loggedin : void 0) === !true) {
      ws.send({
        type: NETCODES.AUTH_RES,
        response: {
          value: false,
          reason: "SESSION INVALID"
        }
      });
      ws.close(4026, "Session invalid");
      return false;
    }
    if (!(checkResponse != null ? checkResponse.uID : void 0)) {
      ws.send({
        type: NETCODES.AUTH_RES,
        response: {
          value: false,
          reason: "NO LEGAL UID"
        }
      });
      ws.close(4027, "NO LEGAL UID");
      return false;
    }
    if (checkResponse.loggedin === true) {
      ws.send({
        type: NETCODES.AUTH_RES,
        response: {
          value: true,
          uID: checkResponse.uID
        }
      });
      return createClient(ws, checkResponse.uID);
    }
    return false;
  };

  handleRequest = function(ws, req) {
    var parsedReq;
    parsedReq = MS.deserialize(req);
    switch (parsedReq.type) {
      case NETCODES.MSG_SEND_REQ:
        return handleMessageRequest(ws, parsedReq.msg);
    }
  };

  createMessageForWire = function(msgObj) {
    var message;
    message = {
      type: NETCODES.MSG,
      message: msgObj
    };
    return message;
  };

  transmitMessage = function(ws, msgObj) {
    return ws.send(MS.serialize(createMessageForWire(msgObj)));
  };

  logUserInfo = function(info) {
    return log("@ " + info);
  };

  logServerInfo = function(info) {
    return log("# " + info);
  };

  logMessage = function(msgObj) {
    return log("> " + msgObj.fromuID + " -> " + msgObj.touID + ": " + msgObj.content);
  };

  logMessageToDisk = function(msgObj) {};

  handleMessageRequest = function(ws, msgObj) {
    var clientFrom, clientTo;
    clientFrom = getClientByWS(ws);
    if (clientFrom == null) {
      ws.send(MS.serialize({
        type: NETCODES.MSG_SEND_RES,
        response: {
          id: msgObj.id,
          value: false,
          reason: "not-connected"
        }
      }));
    }
    clientTo = getClientByuID(msgObj.touID);
    if (clientTo != null) {
      transmitMessage(clientTo, msgObj);
    }
    logMessage(msgObj);
    return logMessageToDisk(msgObj);
  };

  wssConfig = {
    port: 1337
  };

  wss = new WebSocketServer(wssConfig);

  ch = new ClientHolder();

  wss.on("connection", function(ws) {
    ws.on("message", function(msg) {
      var authClient;
      authClient = authenticateConnection(ws, msg);
      if (authClient != null) {
        ch.addClient(authClient);
      } else {
        return;
      }
      return ws.on("message", function(msg) {
        return handleRequest(ws, msg);
      });
    });
    return ws.on("close", function(code, reason) {
      logUserInfo("" + (ch.getClientByWS(ws).uID) + " disconnected.");
      return ch.delClientByWS(ws);
    });
  });

}).call(this);
