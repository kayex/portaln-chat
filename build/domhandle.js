// Generated by CoffeeScript 1.6.1
(function() {

  window.DOMHandle = (function() {

    function DOMHandle() {
      this.chatStatus = null;
      this.chatMainOutput = null;
      this.chatTextarea = null;
      this.pageHeader = this.getHeader();
      this.pageTitle = this.getTitle();
      this.pageBody = this.getBody();
      this.pageNavButton = this.getNavButton();
      this.pageCopyright = this.getCopyright();
      this.callbacks = {
        "submit": void 0
      };
      this.CSS = {
        chatStatus: {
          "width": "100%",
          "padding": "7px",
          "text-align": "left",
          "background-color": "#fff"
        },
        chatMainOutput: {
          "height": "200px",
          "text-align": "left",
          "background-color": "#fff"
        },
        chatTextarea: {
          "font-size": "100%",
          "margin-top": "15px",
          "background-color": "#fff"
        },
        messageAuthor: {
          "width": "100%",
          "border-color": "#ddd",
          "border-style": "solid",
          "padding": "7px 15px 3px 15px",
          "font-family": "Rockwell, KuristaSemibold, Arial",
          "font-size": "16px",
          "background-color": "#fff",
          "float": "left",
          "color": "#41b7d8"
        },
        messageContent: {
          "width": "100%",
          "padding": "3px 15px 8px 15px",
          "background-color": "#fff",
          "float": "left",
          "border-bottom": "1px solid #eee",
          "line-height": "120%"
        }
      };
      this.HTML = {
        body: "<div id=\"chatStatus\"></div>\n<div id=\"chatMainOutput\"></div>\n<input type=\"text\" id=\"chatTextarea\">",
        messageAuthor: "<div class=\"messageAuthor\"></div>",
        messageContent: "<div class=\"messageContent\"></div>"
      };
    }

    DOMHandle.prototype.initDOMChange = function() {
      var _this = this;
      this.pageHeader.html("SkolportalN 2.0 Instant Messaging Service");
      this.pageTitle.html("");
      this.pageBody.html("Body");
      this.pageNavButton.html("Chat");
      this.pageCopyright.html("Injected by Epoch2");
      this.pageBody.html(this.HTML.body);
      this.chatStatus = $("#chatStatus");
      this.chatMainOutput = $("#chatMainOutput");
      this.chatTextarea = $("#chatTextarea");
      this.chatStatus.css(this.CSS.chatStatus);
      this.chatMainOutput.css(this.CSS.chatMainOutput);
      this.chatTextarea.css(this.CSS.chatTextarea);
      this.chatStatus.html("Not connected.");
      this.chatTextarea.focus();
      return this.chatTextarea.keypress(function() {
        var callback, evt, _ref;
        if (event.keyCode === 13) {
          _ref = _this.callbacks;
          for (evt in _ref) {
            callback = _ref[evt];
            if (evt === "submit") {
              callback(_this.chatTextarea.val());
            }
          }
          return _this.chatTextarea.val("");
        }
      });
    };

    DOMHandle.prototype.getHeader = function() {
      return $("div.header");
    };

    DOMHandle.prototype.getTitle = function() {
      return $("div.title");
    };

    DOMHandle.prototype.getBody = function() {
      return $("div.body");
    };

    DOMHandle.prototype.getNavButton = function() {
      return $("a:contains(Resa)");
    };

    DOMHandle.prototype.getCopyright = function() {
      return $("#copyright");
    };

    DOMHandle.prototype.unixToTime = function(unixtime) {
      var date;
      date = new Date(Number(unixtime));
      return {
        hours: date.getHours(),
        minutes: date.getMinutes(),
        seconds: date.getSeconds()
      };
    };

    DOMHandle.prototype.addZeroesToTime = function(timeObject) {
      var addzero, key, time;
      addzero = function(time) {
        if (("" + time).length === 1) {
          return "0" + time;
        } else {
          return "" + time;
        }
      };
      for (key in timeObject) {
        time = timeObject[key];
        timeObject[key] = addzero(time);
      }
      return timeObject;
    };

    DOMHandle.prototype.on = function(event, callback) {
      return this.callbacks[event] = callback;
    };

    DOMHandle.prototype.addMessageToPage = function(messageObject) {
      var authorTag, contentTag, timeStamp, timeStampString;
      authorTag = $(this.HTML.messageAuthor);
      authorTag.css(this.CSS.messageAuthor);
      timeStamp = this.addZeroesToTime(this.unixToTime(messageObject.timeStamp));
      timeStampString = "" + timeStamp.hours + ":" + timeStamp.minutes + ":" + timeStamp.seconds;
      authorTag.html("" + timeStampString + " - " + messageObject.fromUser);
      contentTag = $(this.HTML.messageContent);
      contentTag.css(this.CSS.messageContent);
      contentTag.html(messageObject.content);
      authorTag.appendTo(this.chatMainOutput);
      return contentTag.appendTo(this.chatMainOutput);
    };

    return DOMHandle;

  })();

}).call(this);
