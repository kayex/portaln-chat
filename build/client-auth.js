// Generated by CoffeeScript 1.6.1
(function() {
  var ChatConnection, MS, NETCODES, SESSID, cc, chatServer, createMsgRequest, dh, logConnectionInfo, ws;

  MS = window.MessageSerializer;

  NETCODES = window.NETCODES;

  dh = window.Domhandle;

  ChatConnection = (function() {

    function ChatConnection(ws) {
      var _this = this;
      this.ws = ws;
      this.wsReady = false;
      this.authenticated = false;
      this.msgID = 10;
      this.uID = "";
      this.callbacks = {
        "message": void 0
      };
      this.ws.onopen = function() {
        console.log("onopen");
        return _this.wsReady = true;
      };
    }

    ChatConnection.prototype.handleMessage = function(msg) {
      var parsedMsg;
      parsedMsg = MS.deserialize(msg.content);
      return emit("message", parsedMsg);
    };

    ChatConnection.prototype.emit = function(event, arg) {
      var callback, evt, _ref, _results;
      _ref = this.callbacks;
      _results = [];
      for (evt in _ref) {
        callback = _ref[evt];
        if (evt === event) {
          _results.push(callback(arg));
        }
      }
      return _results;
    };

    ChatConnection.prototype.on = function(event, callback) {
      return this.callbacks[event] = callback;
    };

    ChatConnection.prototype.sendMessage = function(msgObj) {
      msgObj.id = this.msgID;
      this.msgID++;
      return this.ws.send(MS.serialize(createMsgRequest(msgObj)));
    };

    ChatConnection.prototype.sendAuthentication = function(sessid) {
      console.log("send auth");
      console.log(sessid);
      if (this.wsReady) {
        console.log("Ws ready");
        return this.ws.send({
          type: NETCODES.AUTH_REQ,
          SESSID: sessid
        });
      }
    };

    ChatConnection.prototype.authenticate = function(sessid) {
      this.ws.onmessage = function(msg) {
        var authObject, _ref, _ref1;
        console.log("Message: " + msg);
        authObject = MS.deserialize(msg.content);
        if ((authObject != null ? authObject.type : void 0) === !NETCODES.AUTH_RES || !(authObject != null ? (_ref = authObject.response) != null ? _ref.value : void 0 : void 0) || !(authObject != null ? (_ref1 = authObject.response) != null ? _ref1.uID : void 0 : void 0)) {
          logConnectionInfo("AUTH_RES INVALID");
          this.authenticated = false;
          return;
        }
        if (authObject.response.value === true) {
          this.uID = authObject.response.uID;
          logConnectionInfo("Client verified.");
          this.authenticated = true;
          return this.ws.onmessage = this.handleMessage;
        }
      };
      while (!this.authenticated) {
        this.sendAuthentication(sessid);
      }
      console.log("Auth");
      return true;
    };

    return ChatConnection;

  })();

  logConnectionInfo = function(info) {
    return console.log(info);
  };

  createMsgRequest = function(msgObj) {
    var request;
    request = {
      type: NETCODES.MSG_SEND_REQ,
      message: msgObj
    };
    return request;
  };

  chatServer = "ws://127.0.0.1:1337";

  ws = new WebSocket(chatServer);

  SESSID = window.getCookie("PORTALNSESSID");

  cc = new ChatConnection(ws);

  cc.on("message", function(msgObject) {
    return console.log(msgObject);
  });

  window.cc = cc;

}).call(this);
